// Задача 54.
/* Задайте двумерный массив. Напишите программу, которая упорядочит по 
   убыванию элементы каждой строки двумерного массива.*/

try /* Блок обработки исключений.*/
{
    Console.WriteLine("Введите целое натуральное число количества строк матрицы:");
    int rows = int.Parse(Console.ReadLine()!); /* (rows- перевод- строки). Функция Parse () разрешает 
    переводить строку, которая состоит из цифр, в целое число. (!)- для обработки исключений.*/

    if (rows <= 0) /* Если пользователь ввёл количество строк, равным или менше нуля, то...*/
    {
        /* выведем на экран: "Количество строк  в матрице не может быть меньше или равно нулю"...*/
        Console.WriteLine("Количество строк в матрице не может быть меньше или равно нулю.");
        return; /* и вернёмся к началу операции.*/
    }
    Console.WriteLine("Введите целое натуральное число количества столбццов матрицы:");
    int columns = int.Parse(Console.ReadLine()!); // columns- перевод- столбцы.

    if (columns <= 0) /* Если пользователь ввёл количество столбцов, равным или менше нуля, то...*/
    {
        /* выведем на экран: "Количество столбцов в матрице не может быть меньше или равно нулю"...*/
        Console.WriteLine("Количество столбцов в матрице не может быть меньше или равно нулю.");
        return; /* и вернёмся к началу операции.*/
    }
    Console.WriteLine("Введите число начала интервала заполнения матрицы:");
    int beginning = int.Parse(Console.ReadLine()!); // beginning- перевод- начало.

    Console.WriteLine("Введите число конца интервала заполнения матрицы:");
    int end = int.Parse(Console.ReadLine()!); // end- перевод- конец.
    Console.WriteLine(); /* Пустая строка для пробела между вводом значений и ответа.*/

    end = end + 1; /* Добавляем единицу, потому, что при использовании генератора псевдослучайных 
                      чисел Random(), последняя цифра не включается.*/

    int[,] matrix = new int[rows, columns]; /* Здесь int- тип данных, [,]- указатель того, что будет две 
    размерности (двумерный массив). Одна размерность- это строки. Вторая размерность- столбцы. 
    matrix- наименование массива.
    new int- новый массив int. [rows,columns]- (rows- количество строк), (columns- количество  столбцов).*/

    /* Метод, который заполняет нашу матрицу случайными числами.*/
    void FillArray(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < matrix.GetLength(1); j++) /* Здесь обращаемся к конкретному элементу на 
            позиции (i и j) и...*/
            {
                /*пишем, через использование генератора псевдослучайных чисел Random(). Next(beginning,end) 
                  (возьмём из интервала от beginning до end).*/
                matrix[i, j] = new Random().Next(beginning, end);
            }
        }
    }

    /* Метод, который будет выводить на экран матрицу. 
       В качестве аргумента мы передаём прямоугольную таблицу чисел int[,] с именем matrix.*/
    void PrintArray(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < matrix.GetLength(1); j++) /* (1)- означает столбцы.*/
            {
                Console.Write($"{matrix[i, j]} "); /*Все значения каждой строки выводятся в одну отдельную 
                строку.
                Если написать WriteLine- переход на следующу строку, то ответ будет выводиться в столбец.*/
            }
            Console.WriteLine(); /* Пустая строка. Если её не будет, то все 
                                    значения будут выводиться в одну строку.*/
        }
    }

    /* Метод, который упорядочит по убыванию элементы каждой строки двумерного массива.*/
    void SelectionSort(int[,] array)/* В качестве аргумента будет приходить некоторый массив array.*/
    {

        for (int j = 0; j < matrix.GetLength(1) - 1; j++) /* (1)- означает столбцы. Перебираем строку, 
        так как в данном цикле меняется позиция столбца. Если мы начинаем поиск максимального от j+1 (ниже), 
        где j меняется до максимального значения длины нашего массива, то искусственно вычитаем 1 из длинны 
        массива и тогда получится, что j+1 даст общее количество элементов в строке.*/
        {
            for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
            написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            int maxPosition = j; /* Определяем позицию  максимального элемента (maxPosition) и 
            присвоим, ей, значение (J- изначально она равна нулевому столбцу) для которого, в 
            дальнейшем, будем производить следующие действия.*/

            for (int k = j + 1; k < matrix.GetLength(1); k++) /* Этот цикл будет перебирать не 
            сортированную часть одной строки, начиная с позиции (j + 1).*/
            {
                if (array[i, k] > array[i,maxPosition]) maxPosition = k; /* Если следующий элемент в 
                строке больше элемента с позицией (maxPosition), то позиции (maxPosition) присвоим 
                значение позиции этого элемента.*/
            }

        // Замена элементов от большего к меньшему.
        int temporary = array[i,j]; /* Введём временную переменную (temporary) и присвоим ей значение 
        текущего элемента, а...*/
        array[i,j] = array[i,maxPosition]; /* текущему элементу присвоим значение элемента с 
        максимальной позицией (т.е. ставим его в начало строки) и...*/
        array[i,maxPosition] = temporary; /* присваиваем ему значение текущего элемента, так как, 
        в начале, мы, переменной (temporary), присвоили значение текущего элемента.*/        
        }

        }
    }
    FillArray(matrix);  /* Вызов метода заполнения случайными числами нашего массива.*/
    PrintArray(matrix); /* Вызов метода вывода на печать нашего массива, заполненного случайными числами.*/
    Console.WriteLine(); /* Переход на новую строку.*/
    SelectionSort(matrix); /* Вызов метода, который ищет среднее арифметическое элементов в каждом 
    столбце.*/
    PrintArray(matrix); /* Вызов метода вывода на печать нашего массива, заполненного случайными числами.*/
}
catch /* Окончание блока обработки исключений.*/
{
    Console.WriteLine("Некорректный ввод данных. Введите целое натуральное число.");
}