//Задача 51. 
/*Задайте двумерный массив. Найдите сумму элементов, находящихся на главной диагонали.*/

try /* Блок обработки исключений.*/
{
    Console.WriteLine("Введите целое натуральное число количества строк матрицы:");
    int rows = int.Parse(Console.ReadLine()!); /* (rows- перевод- строки). Функция Parse () разрешает 
    переводить строку, которая состоит из цифр, в целое число. (!)- для обработки исключений.*/

    if (rows <= 0) /* Если пользователь ввёл количество строк, равным или менше нуля, то...*/
    {
        /* выведем на экран: "Количество строк  в матрице не может быть меньше или равно нулю"...*/
        Console.WriteLine("Количество строк в матрице не может быть меньше или равно нулю.");
        return; /* и вернёмся к началу операции.*/
    }
    Console.WriteLine("Введите целое натуральное число количества столбццов матрицы:");
    int columns = int.Parse(Console.ReadLine()!); // columns- перевод- столбцы.

    if (columns <= 0) /* Если пользователь ввёл количество столбцов, равным или менше нуля, то...*/
    {
        /* выведем на экран: "Количество столбцов в матрице не может быть меньше или равно нулю"...*/
        Console.WriteLine("Количество столбцов в матрице не может быть меньше или равно нулю.");
        return; /* и вернёмся к началу операции.*/
    }
    Console.WriteLine("Введите число начала интервала заполнения матрицы:");
    int beginning = int.Parse(Console.ReadLine()!); // beginning- перевод- начало.

    Console.WriteLine("Введите число конца интервала заполнения матрицы:");
    int end = int.Parse(Console.ReadLine()!); // end- перевод- конец.
    Console.WriteLine(); /* Пустая строка для пробела между вводом значений и ответа.*/

    end = end + 1; /* Добавляем единицу, потому, что при использовании генератора псевдослучайных 
                      чисел Random(), последняя цифра не включается.*/

    int[,] matrix = new int[rows, columns]; /* Здесь int- тип данных, [,]- указатель того, что будет две 
    размерности (двумерный массив). Одна размерность- это строки. Вторая размерность- столбцы. 
    matrix- наименование массива.
    new int- новый массив int. [rows,columns]- (rows- количество строк), (columns- количество  столбцов).*/

    /* Метод, который заполняет нашу матрицу случайными числами.*/
    /* В качестве аргумента мы передаём прямоугольную таблицу чисел int[,] с именем matrix.*/
    void FillArray(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < matrix.GetLength(1); j++) /* (1)- означает столбцы. Здесь обращаемся к 
                                                             конкретному элементу на позиции (i и j) и...*/
            {
                matrix[i, j] = new Random().Next(beginning, end); /* пишем, через использование 
                генератора псевдослучайных чисел Random(). Next(beginning,end)-возьмём из интервала 
                от beginning до end.*/
            }

        }
    }

    /* Метод, который будет выводить на экран матрицу. 
    В качестве аргумента мы передаём прямоугольную таблицу чисел int[,] с именем matrix.*/
    void PrintArray(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < matrix.GetLength(1); j++) /* (1)- означает столбцы.*/
            {
                Console.Write($"{matrix[i, j]} ");/*Все значения, каждой строки, выводятся в одну отдельную 
                строку. Если написать WriteLine- переход на следующу строку, то ответ будет выводиться в 
                столбец.*/

            }
            Console.WriteLine(); /* Переход на следующую строку. Если её не будет, то все 
                                    значения будут выводиться в одну строку.*/
        }
    }

    /* Метод, который найдёт сумму элементов, находящихся на главной диагонали.*/
    void Sum(int[,] matrix)
    {
        int sum = 0; /* Вводим переменную (sum), в которую будем складывать сумму элементов, 
                        находящихся на главной диагонали.*/
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                if (i == j) sum = sum + matrix[i, j]; /* Так как у элементов, находящихся на главной 
                диагонали индекс строки и столбца совпадают, то ищем эти элементы и суммируем их.*/
            }
        }
        Console.WriteLine($"Сумма элементов, находящихся на главной диагонали равна: {sum}");
    }

    FillArray(matrix);   /* Вызов метода заполнения случайными числами нашего массива.*/
    PrintArray(matrix);  /* Вызов метода вывода на печать нашего массива, заполненного случайными числами.*/
    Console.WriteLine(); /* Переход на следующую строку.*/
    Sum(matrix);         /* Вызов метода, который найдёт сумму элементов, находящихся на главной диагонали.*/

}
catch /* Окончание блока обработки исключений.*/
{
    Console.WriteLine("Некорректный ввод данных. Введите целое натуральное число.");
}
