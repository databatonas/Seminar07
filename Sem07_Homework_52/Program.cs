// Задача 52.
/* Задайте двумерный массив из целых чисел. Найдите среднее арифметическое элементов в каждом столбце.*/

try /* Блок обработки исключений.*/
{
    Console.WriteLine("Введите целое натуральное число количества строк матрицы:");
    int rows = int.Parse(Console.ReadLine()!); /* (rows- перевод- строки). Функция Parse () разрешает 
    переводить строку, которая состоит из цифр, в целое число. (!)- для обработки исключений.*/

    if (rows <= 0) /* Если пользователь ввёл количество строк, равным или менше нуля, то...*/
    {
        /* выведем на экран: "Количество строк  в матрице не может быть меньше или равно нулю"...*/
        Console.WriteLine("Количество строк в матрице не может быть меньше или равно нулю.");
        return; /* и вернёмся к началу операции.*/
    }
    Console.WriteLine("Введите целое натуральное число количества столбццов матрицы:");
    int columns = int.Parse(Console.ReadLine()!); // columns- перевод- столбцы.

    if (columns <= 0) /* Если пользователь ввёл количество столбцов, равным или менше нуля, то...*/
    {
        /* выведем на экран: "Количество столбцов в матрице не может быть меньше или равно нулю"...*/
        Console.WriteLine("Количество столбцов в матрице не может быть меньше или равно нулю.");
        return; /* и вернёмся к началу операции.*/
    }
    Console.WriteLine("Введите число начала интервала заполнения матрицы:");
    int beginning = int.Parse(Console.ReadLine()!); // beginning- перевод- начало.

    Console.WriteLine("Введите число конца интервала заполнения матрицы:");
    int end = int.Parse(Console.ReadLine()!); // end- перевод- конец.
    Console.WriteLine(); /* Пустая строка для пробела между вводом значений и ответа.*/

    end = end + 1; /* Добавляем единицу, потому, что при использовании генератора псевдослучайных 
                      чисел Random(), последняя цифра не включается.*/

    int[,] matrix = new int[rows, columns]; /* Здесь int- тип данных, [,]- указатель того, что будет две 
    размерности (двумерный массив). Одна размерность- это строки. Вторая размерность- столбцы. 
    matrix- наименование массива.
    new int- новый массив int. [rows,columns]- (rows- количество строк), (columns- количество  столбцов).*/

    /* Метод, который заполняет нашу матрицу случайными числами.*/
    void FillArray(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < matrix.GetLength(1); j++) /* Здесь обращаемся к конкретному элементу на 
            позиции (i и j) и...*/ 
            {
                /*пишем, через использование генератора псевдослучайных чисел Random(). Next(beginning,end) 
                  (возьмём из интервала от beginning до end).*/
                matrix[i, j] = new Random().Next(beginning, end);
            }
        }
    }

    /* Метод, который будет выводить на экран матрицу. 
       В качестве аргумента мы передаём прямоугольную таблицу чисел int[,] с именем matrix.*/
    void PrintArray(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < matrix.GetLength(1); j++) /* (1)- означает столбцы.*/
            {
                Console.Write($"{matrix[i, j]} "); /*Все значения каждой строки выводятся в одну отдельную 
                строку.
                Если написать WriteLine- переход на следующу строку, то ответ будет выводиться в столбец.*/
            }
            Console.WriteLine(); /* Пустая строка. Если её не будет, то все 
                                    значения будут выводиться в одну строку.*/
        }
    }

    /* Метод, который будет искать среднее арифметическое элементов в каждом столбце.*/
    void arithmeticMeanColumn(int[,] matrix)
    {
        int count = 0; /* Вводим переменную (count- счётчик).*/
        double result = 0; /* Вводим переменную (result- результат).*/

        for (int j = 0; j < matrix.GetLength(1); j++) /* Пробегаем по столбцам.*/
        {
            for (int i = 0; i < matrix.GetLength(0); i++) /* Пробегаем по строкам.*/
            {
                if (j == count) /* Если индекс столбца равен значению счётчика, то ...*/
                {
                    result += matrix[i, j]; /* в результат записывается сумма всех значений столбца 
                                               с индексом равным счётчику, и...*/
                }
            }
            /* значение (result / rows- результат делим на количество строк- это среднее арифметическое 
            данного столбца) выводится на экран с указанием данного столбца (j + 1- здесь добавляем единицу, 
            так как в матрице отсчёт начинается с нуля- это для лучшего восприятия пользователем).*/

            Console.Write($"Среднее арифметическое {j + 1} столбца равно: {result / rows}");
            Console.WriteLine(); /* Переход на новую строку для отделения ответов.*/
            count++;             /* Увеличиваем счётчик на единицу.*/
            result = 0; /* Результат скидываем на ноль и цикл повторяется для следующего столбца.*/
        }
    }

    FillArray(matrix);  /* Вызов метода заполнения случайными числами нашего массива.*/
    PrintArray(matrix); /* Вызов метода вывода на печать нашего массива, заполненного случайными числами.*/
    Console.WriteLine(); /* Переход на новую строку.*/
    arithmeticMeanColumn(matrix); /* Вызов метода, который ищет среднее арифметическое элементов в каждом 
    столбце.*/

}
catch /* Окончание блока обработки исключений.*/
{
    Console.WriteLine("Некорректный ввод данных. Введите целое натуральное число.");
}
