// Задача 54.1
/* Задайте двумерный массив. Напишите программу, которая упорядочит элементы по убыванию.*/

try /* Блок обработки исключений.*/
{
    Console.WriteLine("Введите целое натуральное число количества строк матрицы:");
    int rows = int.Parse(Console.ReadLine()!); /* (rows- перевод- строки). Функция Parse () разрешает 
    переводить строку, которая состоит из цифр, в целое число. (!)- для обработки исключений.*/

    if (rows <= 0) /* Если пользователь ввёл количество строк, равным или менше нуля, то...*/
    {
        /* выведем на экран: "Количество строк  в матрице не может быть меньше или равно нулю"...*/
        Console.WriteLine("Количество строк в матрице не может быть меньше или равно нулю.");
        return; /* и вернёмся к началу операции.*/
    }
    Console.WriteLine("Введите целое натуральное число количества столбццов матрицы:");
    int columns = int.Parse(Console.ReadLine()!); // columns- перевод- столбцы.

    if (columns <= 0) /* Если пользователь ввёл количество столбцов, равным или менше нуля, то...*/
    {
        /* выведем на экран: "Количество столбцов в матрице не может быть меньше или равно нулю"...*/
        Console.WriteLine("Количество столбцов в матрице не может быть меньше или равно нулю.");
        return; /* и вернёмся к началу операции.*/
    }
    Console.WriteLine("Введите число начала интервала заполнения матрицы:");
    int beginning = int.Parse(Console.ReadLine()!); // beginning- перевод- начало.

    Console.WriteLine("Введите число конца интервала заполнения матрицы:");
    int end = int.Parse(Console.ReadLine()!); // end- перевод- конец.
    Console.WriteLine(); /* Пустая строка для пробела между вводом значений и ответа.*/

    end = end + 1; /* Добавляем единицу, потому, что при использовании генератора псевдослучайных 
                      чисел Random(), последняя цифра не включается.*/

    int[,] matrix = new int[rows, columns]; /* Создаём новый двумерный массив для дальнейших действий. 
    Здесь int- тип данных, [,]- указатель того, что будет две размерности (двумерный массив). 
    Одна размерность- это строки. Вторая размерность- столбцы. matrix- наименование массива. new int- 
    новый массив int. [rows,columns]- (rows- количество строк), (columns- количество  столбцов).*/

    int[] arr = new int[] { }; /* Создаём новый одномерный массив для дальнейших действий.*/

    /* Метод, который заполняет нашу матрицу случайными числами.*/
    void Fillarray(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < matrix.GetLength(1); j++) /* Здесь обращаемся к конкретному элементу на 
            позиции (i и j) и...*/
            {
                /*пишем, через использование генератора псевдослучайных чисел Random(). Next(beginning,end) 
                  (возьмём из интервала от beginning до end).*/
                matrix[i, j] = new Random().Next(beginning, end);
            }
        }
    }

    /* Метод, который будет выводить на экран матрицу. 
       В качестве аргумента мы передаём прямоугольную таблицу чисел int[,] с именем matrix.*/
    void Printarray(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < matrix.GetLength(1); j++) /* (1)- означает столбцы.*/
            {
                Console.Write($"{matrix[i, j]} "); /*Все значения каждой строки выводятся в одну отдельную 
                строку.
                Если написать WriteLine- переход на следующу строку, то ответ будет выводиться в столбец.*/
            }
            Console.WriteLine(); /* Пустая строка. Если её не будет, то все 
                                    значения будут выводиться в одну строку.*/
        }
    }

    // Метод перевода двумерного массива в одномерный.*/
    void Translation(int[,] array)
    {
        for (int i = 0; i < array.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < array.GetLength(1); j++) /* (1)- означает столбцы.*/
            {
                int d = array[i, j]; /* Вводим переменную (d), которой будем присваивать значения 
                                         элементов матрицы при их переборке и ...*/

                arr = arr.Concat(new int[] { d }).ToArray(); /* Добавление числа в новый одномерный 
                                                                массив (arr).*/
            }
        }
    }

    //Метод сортировки одномерного массива от большего к меньшему и преобразования его в двумерный.
    void SelectionSort(int[] array, int[,] matrix)
    {
        int k = 0; int l = 0; /* Зададим значение индексов первого элемента нового двумерного массива.*/

        /* Запишем одномерный массив в виде матрицы с заданным количеством строк (rows) 
           и столбцов (columns).*/
        int n = 1; /* Вводим коэффициент (n)- (по сути- это порядковый номер строки). На него будем умножать индекс одинарного массива (i), 
        при этом (n) будет увеличиваться на единицу каждый раз, как только (i) дойдёт до конца строки.*/

        for (int i = 0; i < array.Length; i++) /* До тех пор, пока индекс элемента меньше длины массива, 
                                                  производим следующие действия...*/
        {
            if (i == columns * n) /* Если в процессе переборки одномерного массива индекс элемента 
            стал равным произведению количества столбцов будущей матрицы на порядковый номер строки 
            ( по сути, как дошли до конца строки будущей матрицы), то...*/
            {
                Console.WriteLine(); /* переходим на новую строку и ...*/
                n++;                 /* порядковый номер строки увеличиваем на единицу, а...*/
                k++;   /* номер строки, нового двумерного массива, увеличиваем на единицу, а...*/
                l = 0; /* номеру столбца, нового двумерного массива, присваиваем значение ноль.*/
            }

            int maxPosition = i;/* Определяем позицию максимального элемента, для которого, в 
                                   дальнейшем, будем производить следующие действия.*/
            for (int j = i + 1; j < array.Length; j++)/* То, что не сортировано начинается с i+1 позиции 
                                                         и идём до последнего элемента массива.*/
            {
                if (array[j] > array[maxPosition]) maxPosition = j;/* Ищем максимальный элемент. 
                Если текущий элемент больше того элемента, который мы предполагали на позиции 
                (maxPosition), то эту позицию нужно сохранить.*/
            }
            // Замена элементов от большего к меньшему.
            int temporary = array[i]; /* Вводим временную переменную (temporary) и  присваиваем 
                                         ей значение элемента с текущим индексом (i).*/
            array[i] = array[maxPosition]; /* Присвоим текущему элементу значение 
                                              максимального элемента.*/
            array[maxPosition] = temporary; /* Макстмальному элементу присваиваем значение временного.*/
            matrix[k, l] = array[i]; /* Текущему элементу двумерного массива присваивае значение 
            текущего, отсортированоого значения одномерного массива.*/

            Console.Write($"{matrix[k, l]} "); /* Выводим на экран значение текущего элемента матрицы.*/
            l++; /* Как только зафиксировали новый элемент матрицы, то следующему 
                    элементу будет присвоен индекс с номером следующего столбца.*/
        }
    }

    Fillarray(matrix);   /* Вызов метода заполнения случайными числами нашего массива.*/
    Console.WriteLine("Несортированный двумерный массив");
    Printarray(matrix);  /* Вызов метода вывода на печать нашего массива, 
                            заполненного случайными числами.*/
    Console.WriteLine(); /* Переход на новую строку.*/
    Translation(matrix); /* Вызываем метод перевода двумерного массива в одномерный.*/
    Console.WriteLine("Сортированный по убыванию двумерный массив");
    SelectionSort(arr, matrix);  /* Вызываем метод сортировки одномерного массива от большего к меньшему 
                                    и преобразования его в двумерный.*/
}
catch /* Окончание блока обработки исключений.*/
{
    Console.WriteLine("Некорректный ввод данных. Введите целое натуральное число.");
}