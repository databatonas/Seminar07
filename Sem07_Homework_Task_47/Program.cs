// Задача 47.
/* Задайте двумерный массив, размером m * n , заполненный случайными вещественными числами.*/

try /* Блок обработки исключений.*/
{
    Console.WriteLine("Введите целое натуральное число количества строк матрицы:");
    int rows = int.Parse(Console.ReadLine()!); /* (rows- перевод- строки). Функция Parse () разрешает 
    переводить строку, которая состоит из цифр, в целое число. (!)- для обработки исключений.*/

    if (rows <= 0) /* Если пользователь ввёл количество строк, равным или менше нуля, то...*/
    {
        /* выведем на экран: "Количество строк  в матрице не может быть меньше или равно нулю"...*/
        Console.WriteLine("Количество строк в матрице не может быть меньше или равно нулю.");
        return; /* и вернёмся к началу операции.*/
    }
    Console.WriteLine("Введите целое натуральное число количества столбццов матрицы:");
    int columns = int.Parse(Console.ReadLine()!); // columns- перевод- столбцы.

    if (columns <= 0) /* Если пользователь ввёл количество столбцов, равным или менше нуля, то...*/
    {
        /* выведем на экран: "Количество столбцов в матрице не может быть меньше или равно нулю"...*/
        Console.WriteLine("Количество столбцов в матрице не может быть меньше или равно нулю.");
        return; /* и вернёмся к началу операции.*/
    }
    Console.WriteLine("Введите целое число начала интервала заполнения матрицы:");
    int beginning = Convert.ToInt32(Console.ReadLine()); // beginning- перевод- начало.

    Console.WriteLine("Введите целое число конца интервала заполнения матрицы:");
    int end = Convert.ToInt32(Console.ReadLine()); // end- перевод- конец.

    Console.WriteLine("Введите цело число количества знаков после запятой:");
    int sign = Convert.ToInt32(Console.ReadLine()); /* sign- перевод- знак.*/

    double fraction = new Random().Next(0, 10) / Math.Pow(10, sign); /* Вводим переменную 
    (fraction- перевод-дробь), которая будет дробной частью числа массива. Она будет определяться
    случайными числами из диапозона от 0 до 10, не включая 10, делённое на 10 в степени (sign),
    которое и определит количество знаков после запятой.*/

    if (sign == 0) fraction = 0; /* Если ввели количество знаков после запятой равное нулю, то присвоим 
                                    дробной части числа ноль (будут вводиться только целые числа).*/
    Console.WriteLine(); /* Пустая строка для пробела между вводом значений и ответа.*/

    double[,] matrix = new double[rows, columns]; /* Здесь double- тип данных, [,]- указатель того, что 
    будет две размерности (двумерный массив). Одна размерность- это строки. Вторая размерность- столбцы. 
    matrix- наименование массива. new double- новый массив double. [rows,columns]- (rows- количество строк), 
    (columns- количество  столбцов).*/

    /* Метод, который заполняет нашу матрицу случайными числами.*/
    /* В качестве аргумента мы передаём прямоугольную таблицу чисел double[,] с именем matrix.*/
    void FillArray(double[,] matrix)
    {      
        for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < matrix.GetLength(1); j++) /* (1)- означает столбцы. Здесь обращаемся к 
                                                             конкретному элементу на позиции (i и j) и...*/
            {
                /* при каждой итерации создаётся элемент двумерного массива (matrix[i, j]), составленный 
                из суммы случайных целых чисел (new Random().Next), из диапозона, введённого пользователем 
                ((beginning, end плюс 1, так как последняя цифра не входит в диапозон данной функции) 
                начала и конца интервала массива) и дробной части, ((fraction) определённой случайным 
                образом), с количеством знаков после запятой (sign), определённой пользователем.*/
                matrix[i, j] = new Random().Next(beginning, end + 1) + fraction; 
            }

        }
    }

    /* Метод, который будет выводить на экран матрицу. 
    В качестве аргумента мы передаём прямоугольную таблицу чисел int[,] с именем matrix.*/
    void PrintArray(double[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++) /* Далее перебираем строки. Для общего случая можно 
        написать количество строк так- matrix.GetLength(0), где (0)- означает строки. */
        {
            for (int j = 0; j < matrix.GetLength(1); j++) /* (1)- означает столбцы.*/
            {
                Console.Write($"{matrix[i, j]}  ");/*Все значения, каждой строки, выводятся в одну отдельную 
                строку с двумя пробелами между ними. Если написать WriteLine- переход на следующу строку, 
                то ответ будет выводиться в столбец.*/

            }
            Console.WriteLine(); /* Переход на следующую строку. Если её не будет, то все 
                                    значения будут выводиться в одну строку.*/
        }
    }

    FillArray(matrix);  /* Вызов метода заполнения случайными числами нашего массива.*/
    PrintArray(matrix); /* Вызов метода вывода на печать нашего массива, заполненного случайными числами.*/
    
    

}
catch /* Окончание блока обработки исключений.*/
{
    Console.WriteLine("Некорректный ввод данных. Введите целое натуральное число.");
}
